# -*- coding: utf-8 -*-
"""Doenças cardíaca - Previsão.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M6RRDo3bgeDmSel6QlYQ0GrxgOuXBZ9J

Importando as Dependencias
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Coleta de dados e processamento"""

# carregando os dados em csv para Pandas DataFrame
heart_data = pd.read_csv('heart.csv')

#print primeiras 5 linhas do dataset
heart_data.head()

#print as ultimas 5 linhas do dataset
heart_data.tail()

#Numero de linhas e colunas no dataset
heart_data.shape

# Pegando algumas informações sobre os dados
heart_data.info()

#Checando por valores vazios
heart_data.isnull().sum()

# Medida estatistica sobre o dado
heart_data.describe()

# Checando a distribuição da variavel target
heart_data['target'].value_counts()

"""1 --- > Coração defeituoso

0 --- > Coração Saudavel

Separando Features e Target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Dividindo os dados em dados de treinamento e dados de teste"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Modelo de training

Regressão Logistica
"""

model = LogisticRegression()

#Training the logisticRegression model with training data
model.fit(X_train, Y_train)

"""Avaliação de modelo

Accuracy Score
"""

#Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Precisão nos dados de treinamento:', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Precisão nos dados de teste: ', test_data_accuracy)

"""Construindo previsão"""

# age,sex,cp,trestbps,chol,fbs,restecg,thalach,exang,oldpeak,slope,ca,thal
input_data = (57,1,0,152,274,0,1,88,1,1.2,1,1,3)

#Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if prediction[0] == 0:
  print('A pessoa não possui Doença Cardíaca')

else:
  print('A pessoa possui Doença Cardíaca')